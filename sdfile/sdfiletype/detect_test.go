package sdfiletype

import (
	"github.com/gaorx/stardust6/sdbytes"
	"github.com/gaorx/stardust6/sdfile"
	"github.com/samber/lo"
	"github.com/stretchr/testify/assert"
	"os"
	"path/filepath"
	"testing"
)

func TestAll(t *testing.T) {
	is := assert.New(t)

	assertType := func(t *Type, ext, mime string) {
		is.NotNil(t)
		is.Equal(ext, t.ExtOr(".unknown"))
		is.Equal(mime, t.MimeOr("unknown"))
	}

	const jpgBase64 = "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"
	jpgData := lo.Must(sdbytes.FromBase64Std(jpgBase64))
	assertType(DetectBytes(jpgData), ".jpg", "image/jpeg")
	_ = sdfile.UseTempDir("", "", func(dirname string) {
		fn := filepath.Join(dirname, "a.jpg")
		err := sdfile.WriteBytes(fn, jpgData, 0600)
		is.NoError(err)
		r, err := os.OpenFile(fn, os.O_RDONLY, 0)
		is.NoError(err)
		defer func() { _ = r.Close() }()
		assertType(DetectReader(r), ".jpg", "image/jpeg")
		assertType(DetectFile(fn), ".jpg", "image/jpeg")
	})
}
